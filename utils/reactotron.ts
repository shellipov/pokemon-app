import AsyncStorage from '@react-native-async-storage/async-storage';
// import { IDebugCommand } from '@VTB/service/DebugCommands';
// import { gDebugCommandsService } from '@VTB/service/DebugCommands/DebugCommandsService.service';
import AnsiParser from 'ansi-parser';
// import { autorun } from 'mobx';
import reactotron from 'reactotron-react-native';
// import ReactotronFlipper from 'reactotron-react-native/dist/flipper';
// import { name as appName } from '../../app.json';

const reactotronHost = process.env.REACTOTRON_HOST || 'localhost';

type Reactotron = typeof reactotron;
let tron: Reactotron | undefined;
const errorTypeRegExp = /.*?{(.*?)}/;

export function reactotronInit () {
  const r = reactotron
    .configure({
      name: 'pokemonApp',
      host: reactotronHost,
      // createSocket: path => new ReactotronFlipper(path),
    });

  // @ts-ignore
  r.useReactNative({
    asyncStorage: { ignore: [] },
    networking: {},
    editor: {},
    errors: {
      veto: (stackFrame: any) => false,
    },
  })
    .setAsyncStorageHandler(AsyncStorage)
    .connect()
    .clear();

  tron = r;

  patchConsoleLog();
  // debugCommandsInit();
}

export async function reactotronConnect () {
  if (tron && !(tron as any).connected) {
    await tron.connect();
    console.log('REACTOTRON Reconnected', tron); // üêû ‚úÖ
  }
}

// patch the console.log
function patchConsoleLog () {
  const nativeConsoleLog = console.log;

  console.log = (...args: any[]) => {
    nativeConsoleLog(...args);
    let name = 'CONSOLE.LOG';
    const isPreview = args.length > 0 && typeof args[0] === 'string';
    let important = false;

    // –ø–∏—à–µ–º –Ω–µ –ø—Ä–æ—Å—Ç–æ CONSOLE.LOG, –∞ —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∞
    const levelReg = /\{(TRACE|DEBUG|INFO|ERROR)\}/;
    const levelNames = levelReg.exec(args[0]);

    if (isPreview && levelNames?.length) {
      // –∑–∞–¥–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∫–∞–∫ –∏–º—è
      name = levelNames[1];
      // —É–¥–∞–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
      args[0] = args[0].replace(levelNames[0], '');
    }

    for (let i = 0; i < args.length; i++) {
      if (typeof args[i] !== 'string') {
        continue;
      }

      const withColor = AnsiParser.parse(args[i]).filter((item) => item.style); // –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ ANSI —Ü–≤–µ—Ç–æ–≤–∞—è escape –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      important = withColor.length > 0;

      // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –æ—à–∏–±–∫–æ–π
      const errorType = isPreview && important ? args[i].match(errorTypeRegExp) : null;

      try {
        // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ js - –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
        if (important) {
          // –æ–±—Ä–µ–∑–∞–µ–º ANSI —Ü–≤–µ—Ç–æ–≤—É—é escape –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (reactotron –µ—ë –Ω–µ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç)
          args.splice(i, 1, AnsiParser.removeAnsi(args[i]));
        }
        args[i] = JSON.parse(args[i]);
        // –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, —Ç–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–∫–∞—Ç—å –æ—à–∏–±–∫—É - —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–±—ä–µ–∫—Ç
        important = false;
      } catch (e) {
        // no code
      }

      name = errorType && important ? errorType[1] : name;
    }


    // –Ω–∞—Ö–æ–¥–∏–º –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –≤ –ø—Ä–µ–≤—å—é
    let countOfStrungsArgs = 0;
    while (args[countOfStrungsArgs] && (typeof args[countOfStrungsArgs] === 'string' || typeof args[countOfStrungsArgs] === 'number')) {
      countOfStrungsArgs++;
    }

    // –¥–µ–ª–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 120 –ø–µ—Ä–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    const preview = isPreview ? args.slice(0, countOfStrungsArgs).join(' ').slice(0, 120) : null;

    reactotron.display({
      name,
      value: args,
      preview,
      important,
    });
  };
}

// function debugCommandsInit() {
//   autorun(() => {
//     debugCommandsMap(gDebugCommandsService.commands);
//   });
// }

 type DebugCommandHandler = () => void;

 interface IDebugCommand {
  title: string;
  handler: DebugCommandHandler;
}

// interface ICustomCommand {
//   debugCommand: IDebugCommand;
//   uid: string;
//   remover: () => void;
// }

// let customCommands: ICustomCommand[] = [];

// function debugCommandsMap(debugCommands: IDebugCommand[]) {
//   const r = tron!;
//   // remove deleted
//   const removedCommands = customCommands.filter(cc => debugCommands.indexOf(cc.debugCommand) === -1);
//   removedCommands.forEach(cc => cc.remover());
//
//   // add new
//   customCommands = customCommands.filter(cc => debugCommands.indexOf(cc.debugCommand) !== -1);
//   debugCommands.forEach(dc => {
//     const isExists = customCommands.findIndex(cc => cc.debugCommand === dc) !== -1;
//     const uid = debugCommandUidAbbrev(dc);
//     const description = `command (cmd+.): ${uid}`;
//     if (!isExists) {
//       const remover = r.onCustomCommand({
//         command: uid, description, title: dc.title, handler: () => {
//           console.log(`üêû [DebugCommand] Execute: ${dc.title}`); // üêû ‚úÖ
//           dc.handler();
//         },
//       });
//
//       customCommands.push({
//         debugCommand: dc,
//         uid,
//         remover,
//       });
//     }
//
//     console.log(`üêû [DebugCommand] ${description} ‚Üí ${dc.title}`); // üêû ‚úÖ
//   });
// }

// function debugCommandUidAbbrev(dc: IDebugCommand): string {
//   return dc.title.trim().split(' ').map(word => word[0]).join('').toLowerCase();
// }
